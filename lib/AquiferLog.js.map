{"version":3,"sources":["../src/AquiferLog.js"],"names":["entities","AllHtmlEntities","A_VISUAL_TEST_FAILED","passthrough","message","EVENT_SNAPSHOTS_DIR_NAME","ERROR_SNAPSHOTS_DIR_NAME","DIFF_IMAGES_DIR_NAME","convertStylesToClassValue","style","_styles","join","getEventScreenshotFileRelPath","id","getErrorScreenshotFileRelPath","getDiffImageCopyRelPath","base","getGrandparentsTitle","fullTitle","title","parent","bitToRemove","replace","isSingleSelector","text","startsWith","aquiferStyle","selector","selector_red","toHtmlString","classValue","html","link","dblclickableSelector","toConsoleString","cleanPassword","password","object","getScreenshotId","currDateObject","Date","toLowerCase","verb","colors","italic","verb_red","red","bold","object_red","filler","reset","filler_red","dim","gray","emoji","FAILURE_MESSAGES","AquiferLog","doPrintToConsole","global","aquiferOptions","muteConsole","doSaveEventScreenshots","noPics","screenshotTargetName","undefined","screenshotTargetSelector","specFailed","aVisualTestFailed","errorMidpointScreenshotIds","errorMidpointScreenshotIds_printed","specFile","isInTestCase","hasPrintedNontestLine","randomWait","Math","floor","random","browser","pause","testParentDateTime","specMillis","specTime","specDate","specFilePath","fs_extra","mkdirsSync","getReportDir","getEventScreenshotsDir","getErrorScreenshotsDir","copySync","iconDir","logRawToHtml","pageInitialize","getSpecFileTestlessName","getRelativeSpecFilePath","testCaseTitle","testParentTitle","testCaseFullTitle","testGrandparentsTitle","split","length","includes","toHide","toShow","runDate","getDateDir","runTime","result","getTimeDir","getSpecFileName","getDiffImagesDir","filenamify","screenshotId","push","saveErrorScreenshot","screenshotFile","saveScreenshot","getEventScreenshotFileAbsPath","getErrorScreenshotFileAbsPath","destination","optionalScreenshotSourceFile","call","sleep","ms","Promise","resolve","setTimeout","demo","count","fs","existsSync","copyFileSync","messages","logRichMessages","saveEventScreenshot","logPrefixedText","withPrefix","currTime","trim","getSpecFileDirName","withScreenshot","currDate","onmouseoverHtml","htmlBuilder","encode","deleteUnusedMidpointErrorScreenshots","logHorizontalLine","consoleBuilder","initializeConsoleString","initializeHtmlString","forEach","console","log","diffImageFilePath","report","mkdirSync","diffImageNewAbsPath","getDiffImageCopyAbsPath","path","parse","diffImageNewRelPath","JSON","stringify","logWithoutPrefix_toHtml","logWithoutPrefix_toConsole","appendFileSync","getFile","os","EOL","getSpacelessTestCaseFullTitle","blue","logWithoutPrefix","logRichMessagesWithScreenshot","green","stack","logErrorImageToHtml","reportContents","readFileSync","toString","writeFileSync","suite","runId","file","initialize","reportClickablePath","filter","unlinkSync","test","grandparentsTitle","initializeNewTestCase","logTestStart","i","rimraf","sync","testDidPass","err","logPassed","logFailed","reportClickablePathWithHash","endNewTestCase","wdioConf_afterTest"],"mappings":"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","sourcesContent":["// @ts-check\n/* eslint prefer-destructuring: \"off\" */\nimport colors from 'colors/safe';\nimport dateFormat from 'dateformat';\nimport * as fs from 'fs';\nimport * as fs_extra from 'fs-extra';\nimport { AllHtmlEntities } from 'html-entities';\nimport * as os from 'os';\nimport * as path from 'path';\nimport rimraf from 'rimraf';\nimport { html } from './HtmlBuilder';\nimport { iconDir } from '.';\n\nconst entities = new AllHtmlEntities();\n\nexport const A_VISUAL_TEST_FAILED = 'A visual test failed.';\n\nfunction passthrough(message) {\n  return message;\n}\n\n/** holds DOMs as well as event screenshots */\nconst EVENT_SNAPSHOTS_DIR_NAME = 'eventSnapshots';\nconst ERROR_SNAPSHOTS_DIR_NAME = 'errorSnapshots';\n/** these files get copied from the visual regression service when an image test fails. */\nconst DIFF_IMAGES_DIR_NAME = 'diffImages';\n\n/**\n *\n * @param {Object} style has a parameter '_styles' which is an array of strings describing the style, like \"red\", or \"emoji\"\n */\nfunction convertStylesToClassValue(style) {\n  return style && style._styles ? style._styles.join(' ') : '';\n}\n\nfunction getEventScreenshotFileRelPath(id) {\n  return `${EVENT_SNAPSHOTS_DIR_NAME}/${id}.png`;\n}\n\nfunction getErrorScreenshotFileRelPath(id) {\n  return `${ERROR_SNAPSHOTS_DIR_NAME}/${id}.png`;\n}\n\nfunction getDiffImageCopyRelPath(base) {\n  return `${DIFF_IMAGES_DIR_NAME}/${base}`;\n}\n\n/**\n *\n * @param {string} fullTitle\n * @param {string} title\n * @param {string} parent\n */\nconst getGrandparentsTitle = (fullTitle, title, parent) => {\n  const bitToRemove = `${parent} ${title}`;\n  return fullTitle.replace(bitToRemove, '');\n};\n\nconst isSingleSelector = (style, text) => !text.startsWith(' excluding') && (style === aquiferStyle.selector || style === aquiferStyle.selector_red);\n\nconst toHtmlString = ({ style = passthrough, text = '' }) => {\n  const classValue = convertStylesToClassValue(style);\n\n  if (text.startsWith('http')) {\n    return html.link(classValue, text);\n  }\n  if (isSingleSelector(style, text)) {\n    return html.dblclickableSelector(classValue, text);\n  }\n  return html.text(classValue, text);\n};\n\nconst toConsoleString = ({ style, text }) => `${typeof style === 'function' ? style(text) : text}`;\n\nconst cleanPassword = (message) => {\n  if (message.style === aquiferStyle.password) {\n    message.text = message.text.replace(/[^\\s]/g, '•');\n    message.style = aquiferStyle.object;\n  }\n  return message;\n};\n\n\nconst getScreenshotId = (currDateObject = new Date()) => dateFormat(currDateObject, 'hh:MM:ss.lTT').toLowerCase();\n\nconst aquiferStyle = {\n  verb: colors.italic,\n  // @ts-ignore\n  verb_red: colors.italic.red,\n  object: colors.bold,\n  // @ts-ignore\n  object_red: colors.bold.red,\n  filler: colors.reset,\n  // @ts-ignore\n  filler_red: colors.red,\n  // @ts-ignore\n  selector_red: colors.dim.red,\n  selector: colors.gray,\n  emoji: { _styles: ['emoji'] },\n  password: 'password',\n};\n// @ts-ignore\nconst FAILURE_MESSAGES = [{ text: '❌ ', style: aquiferStyle.emoji }, { text: 'FAIL', style: colors.red.bold }];\n\nclass AquiferLog {\n  constructor() {\n    this.doPrintToConsole = !global.aquiferOptions.muteConsole;\n    this.doSaveEventScreenshots = !global.aquiferOptions.noPics;\n    this.style = aquiferStyle;\n    this.screenshotTargetName = undefined;\n    this.screenshotTargetSelector = undefined;\n    this.specFailed = false;\n    this.aVisualTestFailed = false;\n    this.errorMidpointScreenshotIds = [];\n    this.errorMidpointScreenshotIds_printed = [];\n  }\n\n\n  /**\n     * Called in global \"before\", once test's spec file path has been determined.\n     * @param {String} specFile\n     */\n  initialize(specFile) {\n    this.isInTestCase = false;\n    this.hasPrintedNontestLine = false;\n\n    const randomWait = Math.floor(Math.random() * 1000);\n    browser.pause(randomWait); // to prevent two parallel-running tests from starting at exactly the same time\n\n    const testParentDateTime = new Date();\n\n    this.specMillis = dateFormat(testParentDateTime, 'l');\n    this.specTime = dateFormat(testParentDateTime, 'hh:MM:ss.lTT').toLowerCase();\n    this.specDate = dateFormat(testParentDateTime, 'yyyymmdd');\n\n    this.specFilePath = specFile;\n\n    fs_extra.mkdirsSync(this.getReportDir());\n    fs_extra.mkdirsSync(this.getEventScreenshotsDir());\n    fs_extra.mkdirsSync(this.getErrorScreenshotsDir());\n    fs_extra.copySync(iconDir, `${this.getReportDir()}/icon`);\n\n    this.logRawToHtml(html.pageInitialize(this.getSpecFileTestlessName(), this.doSaveEventScreenshots, this.getRelativeSpecFilePath()));\n  }\n\n  initializeNewTestCase(testCaseTitle, testParentTitle, testCaseFullTitle, testGrandparentsTitle) {\n    this.isInTestCase = true;\n    this.testCaseTitle = testCaseTitle;\n    this.testParentTitle = testParentTitle;\n    this.testCaseFullTitle = testCaseFullTitle;\n    this.testGrandparentsTitle = testGrandparentsTitle;\n    this.hasPrintedNontestLine = false;\n  }\n\n  endNewTestCase() {\n    this.isInTestCase = false;\n    this.testCaseTitle = undefined;\n    this.testCaseFullTitle = undefined;\n    this.hasPrintedNontestLine = false;\n  }\n\n  getSpecFileName() {\n    const split = this.specFilePath.split('/');\n    return split[split.length - 1].replace('.js', '');\n  }\n\n  getRelativeSpecFilePath() {\n    if (this.specFilePath.includes('/src')) {\n      const split = this.specFilePath.split('/src');\n      const toHide = split[0];\n      const toShow = this.specFilePath.replace(toHide, '');\n      return toShow;\n    }\n    return this.specFilePath;\n  }\n\n  getSpecFileTestlessName() {\n    const split = this.specFilePath.split('/');\n    return split[split.length - 1].replace('.test.js', '');\n  }\n\n  getSpecFileDirName() {\n    const split = this.specFilePath.split('/');\n    return split[split.length - 2];\n  }\n\n  getDateDir() {\n    return `aquiferlog/${global.aquiferOptions.runDate}`;\n  }\n\n  getTimeDir() {\n    return `${this.getDateDir()}/${global.aquiferOptions.runTime}`;\n  }\n\n  /** one log file per test js file */\n  getReportDir() {\n    const result = `${this.getTimeDir()}/${this.getSpecFileName()}_${this.specTime}`.replace('.test', '');\n    return result;\n  }\n\n  getEventScreenshotsDir() {\n    return `${this.getReportDir()}/${EVENT_SNAPSHOTS_DIR_NAME}`;\n  }\n\n  getErrorScreenshotsDir() {\n    return `${this.getReportDir()}/${ERROR_SNAPSHOTS_DIR_NAME}`;\n  }\n\n  getDiffImagesDir() {\n    return `${this.getReportDir()}/${DIFF_IMAGES_DIR_NAME}`;\n  }\n\n  getEventDomFileAbsPath(id) {\n    return `${this.getEventScreenshotsDir()}/${id}.html`;\n  }\n\n  getEventScreenshotFileAbsPath(id) {\n    return `${this.getEventScreenshotsDir()}/${id}.png`;\n  }\n\n  getErrorScreenshotFileAbsPath(id) {\n    return `${this.getErrorScreenshotsDir()}/${id}.png`;\n  }\n\n  getDiffImageCopyAbsPath(base) {\n    return `${this.getDiffImagesDir()}/${base}`;\n  }\n\n  getSpacelessTestCaseFullTitle() {\n    if (this.isInTestCase) {\n      return global.filenamify(this.testCaseFullTitle.replace(/ /g, '_'));\n    }\n\n    return global.filenamify(this.testParentTitle.replace(/ /g, '_'));\n  }\n\n  getFile() {\n    return `${this.getReportDir()}/index.html`;\n  }\n\n  get reportClickablePathWithHash() {\n    return `${this.reportClickablePath}#${this.getSpacelessTestCaseFullTitle()}`;\n  }\n\n  get reportClickablePath() {\n    return `file://${path.resolve(this.getFile())}`;\n  }\n\n  saveScreenshotWhileWaiting() {\n    const screenshotId = getScreenshotId();\n    this.errorMidpointScreenshotIds.push(screenshotId);\n    this.saveErrorScreenshot(screenshotId);\n  }\n\n\n  saveEventScreenshot(screenshotId, screenshotFile = undefined) {\n    if (this.doSaveEventScreenshots) {\n      this.saveScreenshot(this.getEventScreenshotFileAbsPath(screenshotId), screenshotFile);\n    }\n  }\n\n  saveErrorScreenshot(screenshotId) {\n    this.saveScreenshot(this.getErrorScreenshotFileAbsPath(screenshotId));\n  }\n\n  saveScreenshot(destination, optionalScreenshotSourceFile = undefined) {\n    if (optionalScreenshotSourceFile) {\n      // screenshotFile from visual regression service.  using it instead of taking new screenshot\n      // screenshotFile doens't exist yet!  but it will in a second.\n      // need to spin off a thread that will wait until the file exists, and then copy it.\n      // or wait to copy until later??? no, this might be the last step of a test.\n\n      browser.call(() => {\n        function sleep(ms) {\n          return new Promise(resolve => setTimeout(resolve, ms));\n        }\n        async function demo() {\n          let count = 0;\n          while (!fs.existsSync(optionalScreenshotSourceFile)) {\n            /* eslint no-await-in-loop: \"off\" */\n            await sleep(100);\n            count += 1;\n            if (count > 100) { // after 10 seconds\n              break;\n            }\n          }\n          fs.copyFileSync(optionalScreenshotSourceFile, destination);\n        }\n        demo();\n      });\n    } else {\n      browser.saveScreenshot(destination);\n    }\n  }\n\n  /**\n   *\n   * @param {Array | undefined} messages\n   * @param {string | undefined} screenshotFile\n   */\n  logRichMessagesWithScreenshot(messages = [], screenshotFile = undefined) {\n    const screenshotId = this.logRichMessages(messages);\n    this.saveEventScreenshot(screenshotId, screenshotFile);\n  }\n\n  /**\n   *\n   * @param {string} message\n   * @param {string | undefined} screenshotFile\n   */\n  logScreenshottedMessage(message = '', screenshotFile = undefined) {\n    const screenshotId = this.logPrefixedText(message);\n    this.saveEventScreenshot(screenshotId, screenshotFile);\n  }\n\n  logPrefixedText(message) {\n    return this.logRichMessages([{ text: message }]);\n  }\n\n  initializeConsoleString(withPrefix, currDateObject) {\n    if (!withPrefix) {\n      return '';\n    }\n\n    const currTime = dateFormat(currDateObject, 'hh:MM:sstt');\n\n    if (this.isInTestCase) {\n      return `${currTime} ${colors.gray(`${this.testGrandparentsTitle} ${this.testParentTitle}`.trim())} ${this.testCaseTitle}> `;\n    }\n    return `${currTime} ${colors.gray(this.getSpecFileDirName())}/${this.getSpecFileName()}>  `;\n  }\n\n  initializeHtmlString(withPrefix, withScreenshot, currDateObject) {\n    const currTime = dateFormat(currDateObject, 'hh:MM:sstt');\n    const currDate = dateFormat(currDateObject, 'yyyymmdd');\n\n    const screenshotId = getScreenshotId(currDateObject);\n\n    const onmouseoverHtml = withScreenshot ? ` onmouseover=\"logEntryMouseover('${screenshotId}', '${getEventScreenshotFileRelPath(screenshotId)}');\"` : '';\n\n    let htmlBuilder = `<span class=\"logline\" id=\"entrySpan${screenshotId}\" ${onmouseoverHtml}>`;\n\n    htmlBuilder += withPrefix ? entities.encode(`${currDate} ${currTime}> `) : '';\n\n    return htmlBuilder;\n  }\n\n  logRichMessages(messages = [], { withPrefix = true, withScreenshot = true } = {}) {\n    if (withPrefix && messages !== FAILURE_MESSAGES) {\n      // new logline, so delete old unused midpoint images and clear errorMidpointScreenshotIds array\n      this.deleteUnusedMidpointErrorScreenshots();\n    }\n    const currDateObject = new Date();\n\n    if (!this.isInTestCase && !this.hasPrintedNontestLine) {\n      this.logHorizontalLine();\n      this.hasPrintedNontestLine = true;\n    }\n\n    let consoleBuilder = this.initializeConsoleString(withPrefix, currDateObject);\n    let htmlBuilder = this.initializeHtmlString(withPrefix, withScreenshot, currDateObject);\n\n    messages.forEach((message) => {\n      message = cleanPassword(message);\n\n      htmlBuilder += toHtmlString(message);\n      consoleBuilder += toConsoleString(message);\n    });\n    htmlBuilder += '</span><br/>';\n    this.logRawToHtml(htmlBuilder);\n\n    if (this.doPrintToConsole) {\n      console.log(consoleBuilder);\n    }\n    return getScreenshotId(currDateObject);\n  }\n\n  logErrorImageToHtml(screenshotId) {\n    this.errorMidpointScreenshotIds.forEach((id) => {\n      this.logRawToHtml(\n        `<span class='errorimgname'>${id}</span><br/><img id=\"logErrorImage\" src=${getErrorScreenshotFileRelPath(id)} width=45%></img><br/>`,\n      );\n      this.errorMidpointScreenshotIds_printed.push(id);\n    });\n\n    this.logRawToHtml(\n      `<span class='errorimgname'>${screenshotId}</span><br/><img id=\"logErrorImage\" src=${getErrorScreenshotFileRelPath(screenshotId)} width=45%></img><br/>`,\n    );\n\n    this.errorMidpointScreenshotIds = [];\n  }\n\n  logFailedVisualTest(diffImageFilePath, report) {\n    if (!fs.existsSync(this.getDiffImagesDir())) {\n      fs.mkdirSync(this.getDiffImagesDir());\n    }\n\n    const diffImageNewAbsPath = this.getDiffImageCopyAbsPath(path.parse(diffImageFilePath).base.replace(/ /g, '_'));\n    const diffImageNewRelPath = getDiffImageCopyRelPath(path.parse(diffImageFilePath).base.replace(/ /g, '_'));\n\n    fs.copyFileSync(diffImageFilePath, diffImageNewAbsPath);\n\n    this.logRichMessages([{ text: `Visual test failed: ${JSON.stringify(report)}`, style: colors.red }], { withScreenshot: false });\n\n    this.logWithoutPrefix_toHtml('Diff image: ', colors.red);\n\n    this.logRawToHtml(`<img style=\"width:35%\" src=\"${diffImageNewRelPath}\"><br>`);\n  }\n\n  logWithoutPrefix(message, style) {\n    this.logWithoutPrefix_toConsole(message, style);\n    this.logWithoutPrefix_toHtml(message, style);\n  }\n\n  logRawToHtml(text) {\n    fs.appendFileSync(this.getFile(), text + os.EOL);\n  }\n\n  logHorizontalLine() {\n    if (this.doPrintToConsole) {\n      console.log('---------------------------------------------------------------------------------------');\n      console.log('');\n    }\n    this.logRawToHtml('<hr/><br/>');\n  }\n\n  /* eslint no-param-reassign: \"off\" */\n  logWithoutPrefix_toHtml(message, style) {\n    const classValue = convertStylesToClassValue(style);\n\n    this.logRawToHtml(`<span class=\"whitespace ${classValue}\">${entities.encode(message)}</span><br/>`);\n  }\n\n  /* eslint no-param-reassign: \"off\" */\n  logWithoutPrefix_toConsole(message, style) {\n    if (!style) {\n      style = passthrough;\n    }\n    if (this.doPrintToConsole) {\n      console.log(style(message));\n    }\n  }\n\n  // run this before \"it\"\n  logTestStart() {\n    this.logRawToHtml(`<span id=${this.getSpacelessTestCaseFullTitle()}></span>`);\n    this.logHorizontalLine();\n\n    this.logRichMessages([\n      { text: 'Starting test:  ', style: colors.bold },\n      { text: `${this.testGrandparentsTitle} `, style: colors.reset },\n      { text: `${this.testParentTitle} `, style: colors.blue },\n      // @ts-ignore\n      { text: this.testCaseTitle, style: colors.bold.blue },\n    ], { withPrefix: false, withScreenshot: false });\n    this.logWithoutPrefix('');\n  }\n\n  logPassed() {\n    // @ts-ignore\n    this.logRichMessagesWithScreenshot([{ text: '✅ ', style: this.style.emoji }, { text: 'PASS', style: colors.green.bold }]);\n  }\n\n\n  logFailed(stack) {\n    this.specFailed = true;\n\n\n    if (stack.includes(A_VISUAL_TEST_FAILED)) {\n      this.logRichMessages(FAILURE_MESSAGES, { withScreenshot: false });\n      this.logRawToHtml(`<span name=\"thisIsWhereStackGoes\" class=\"monospace red\"><pre>${entities.encode(stack)}</pre></span><br/>`);\n    } else {\n      this.logRichMessagesWithScreenshot(FAILURE_MESSAGES);\n\n      this.logRawToHtml(`<span name=\"thisIsWhereStackGoes\" class=\"monospace red\"><pre>${entities.encode(stack)}</pre></span><br/>`);\n\n\n      const screenshotId = getScreenshotId();\n\n      browser.saveScreenshot(this.getErrorScreenshotFileAbsPath(screenshotId));\n      this.logErrorImageToHtml(screenshotId);\n\n      // replace favicon with favicon_fail\n      let reportContents = fs.readFileSync(this.getFile()).toString();\n      reportContents = reportContents.replace('favicon', 'favicon_fail');\n      fs.writeFileSync(this.getFile(), reportContents);\n    }\n  }\n\n  /** Called from global in wdio.conf.js */\n  logVisualTestReset(screenshotFile) {\n    this.logRichMessagesWithScreenshot([\n      { text: '📷 ', style: this.style.emoji },\n      { text: 'Reset ', style: this.style.verb_red },\n      { text: 'screenshot ', style: this.style.filler_red },\n      { text: this.screenshotTargetName, style: this.style.object_red },\n      { text: this.screenshotTargetSelector, style: this.style.selector_red }],\n    screenshotFile);\n  }\n\n  /** Called from global in wdio.conf.js */\n  logVisualTestCreate(screenshotFile) {\n    this.logRichMessagesWithScreenshot([\n      { text: '📷 ', style: this.style.emoji },\n      { text: 'Save ', style: this.style.verb_red },\n      { text: 'screenshot ', style: this.style.object_red },\n      { text: this.screenshotTargetName, style: this.style.object_red },\n      { text: this.screenshotTargetSelector, style: this.style.selector_red }],\n    screenshotFile);\n  }\n\n  /** Called from global in wdio.conf.js */\n  logVisualTestVerify(screenshotFile) {\n    this.logRichMessagesWithScreenshot([\n      { text: '📸 ', style: this.style.emoji },\n      { text: 'Verify ', style: this.style.verb },\n      { text: 'screenshot ', style: this.style.object },\n      { text: this.screenshotTargetName, style: this.style.object },\n      { text: this.screenshotTargetSelector, style: this.style.selector }],\n    screenshotFile);\n  }\n\n  wdioConf_beforeSuite(suite, runId) {\n    this.isInTestCase = false;\n    this.specFilePath = suite.file;\n    this.testCaseTitle = undefined;\n    this.testParentTitle = suite.parent;\n    this.testCaseFullTitle = suite.fullTitle;\n    this.testGrandparentsTitle = undefined;\n    this.runId = runId;\n\n    this.initialize(this.specFilePath);\n    if (this.doPrintToConsole) {\n      console.log('');\n    }\n    console.log('📝 ', this.reportClickablePath, '\\n');\n  }\n\n\n  deleteUnusedMidpointErrorScreenshots() {\n    // delete unused midpoint screenshots\n    this.errorMidpointScreenshotIds\n      .filter(id => !this.errorMidpointScreenshotIds_printed.includes(id))\n      .forEach(id => fs.unlinkSync(this.getErrorScreenshotFileAbsPath(id)));\n\n    this.errorMidpointScreenshotIds_printed = [];\n    this.errorMidpointScreenshotIds = [];\n  }\n\n  wdioConf_beforeTest(test) {\n    const grandparentsTitle = getGrandparentsTitle(test.fullTitle, test.title, test.parent);\n    this.initializeNewTestCase(test.title.trim(), test.parent.trim(), test.fullTitle.trim(), grandparentsTitle.trim());\n    this.logTestStart();\n  }\n\n  /** called from wdio.conf.js */\n  wdioConf_after() {\n    if (!global.aquiferOptions.muteConsole) {\n      console.log('\\n📝 ', this.reportClickablePath, '\\n');\n    }\n  }\n\n  /** called from wdio.conf.js */\n  wdioConf_afterSession() {\n    fs.appendFileSync(this.runId, `${this.specFailed ? '❌ ' : '✅ '} ${this.reportClickablePath}${os.EOL}`);\n\n    // so you can scroll code up so the screenshot isn't blocking it\n    for (let i = 0; i < 30; i++) {\n      this.logRawToHtml('</br>');\n    }\n\n    rimraf.sync('screenshots/screen');\n  }\n\n  /**\n   * Called from wdio.conf.js after testcase or suite completion\n   * @param {boolean} testDidPass\n   * @param {*} err\n   */\n  wdioConf_afterTest(testDidPass, err) {\n    // if test passed, ignore, else take and save screenshot.\n    if (testDidPass) {\n      this.logPassed();\n    } else {\n      this.logFailed(err.stack);\n      console.log(`📉 ❌ ${this.reportClickablePathWithHash}`);\n    }\n    this.endNewTestCase();\n  }\n\n  wdioConf_afterSuite(err) {\n    if (err) {\n      this.wdioConf_afterTest(false, err);\n    }\n  }\n}\n\nexport const log = new AquiferLog();\n\nglobal.log = log;\n"],"file":"AquiferLog.js"}