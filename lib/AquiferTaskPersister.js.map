{"version":3,"sources":["../src/AquiferTaskPersister.js"],"names":["AquiferTaskPersister","timeoutMillis","timer","AquiferTimer","startTimer","error","hasSucceeded","implicitWaitInMillis","numTries","isTerminated","milliseconds","threadSleep","sleep","isExpired","console","log","didSucceed","e","throwable","elapsedTime"],"mappings":";;;;;;;;;;;;;AACA;;AADA;IAGaA,oB;;;AACX,gCAAYC,aAAZ,EAA2B;AAAA;AACzB,SAAKA,aAAL,GAAqBA,aAArB;AACA,SAAKC,KAAL,GAAaC,2BAAaC,UAAb,CAAwBH,aAAxB,CAAb;AAEA,SAAKI,KAAL,GAAa,IAAb;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,oBAAL,GAA4B,CAA5B;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACD;;;;kCAMa;AACZ,aAAO,KAAKD,QAAZ;AACD;AAED;;;;0BACME,Y,EAAc;AAClB,UAAI,CAAC,KAAKJ,YAAV,EAAwB;AACtB,aAAKJ,KAAL,CAAWS,WAAX,CAAuBD,YAAvB;AACD;AACF;AAED;;;;8BACU;AACR,WAAKR,KAAL,GAAaC,2BAAaC,UAAb,CAAwB,KAAKH,aAA7B,CAAb;AACA,WAAKK,YAAL,GAAoB,KAApB;AACD;;;iCAEY;AACX,UAAI,KAAKG,YAAT,EAAuB,OAAO,IAAP;;AAEvB,UAAI,KAAKD,QAAL,GAAgB,CAApB,EAAuB;AACrB,aAAKI,KAAL,CAAW,KAAKL,oBAAhB;AACD;;AAED,WAAKC,QAAL,IAAiB,CAAjB;AAEA,aAAO,KAAKF,YAAL,IAAqB,KAAKJ,KAAL,CAAWW,SAAX,EAA5B;AACD;;;iCAMY;AACX,aAAO,KAAKP,YAAZ;AACD;;;6CAEwB;AACvB,UAAI,KAAKD,KAAL,IAAc,IAAlB,EAAwB;AACtBS,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKV,KAA9B;AACD;AACF;;;+BAEUW,U,EAAY;AACrB,WAAKV,YAAL,GAAoBU,UAApB;AACD;;;iCAEYC,C,EAAG;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,CAAzB;AACA,WAAKC,SAAL,GAAiBD,CAAjB;AACD;AAED;;;;oCACgBP,Y,EAAc;AAC5B,WAAKH,oBAAL,GAA4BG,YAA5B;AACA,aAAO,IAAP;AACD;AAED;;;;gCACY;AACV,WAAKD,YAAL,GAAoB,IAApB;AACD;AAED;;;;qCACiB;AACf,aAAO,KAAKP,KAAL,CAAWiB,WAAX,EAAP;AACD;;;+BAtEiBlB,a,EAAe;AAC/B,aAAO,IAAID,oBAAJ,CAAyBC,aAAzB,CAAP;AACD;;;iCA+BmBA,a,EAAe;AACjC,aAAO,IAAID,oBAAJ,CAAyBC,aAAzB,CAAP;AACD","sourcesContent":["// @ts-check\nimport { AquiferTimer } from './AquiferTimer';\n\nexport class AquiferTaskPersister {\n  constructor(timeoutMillis) {\n    this.timeoutMillis = timeoutMillis;\n    this.timer = AquiferTimer.startTimer(timeoutMillis);\n\n    this.error = null;\n    this.hasSucceeded = false;\n    this.implicitWaitInMillis = 0;\n    this.numTries = 0;\n    this.isTerminated = false;\n  }\n\n  static initialize(timeoutMillis) {\n    return new AquiferTaskPersister(timeoutMillis);\n  }\n\n  getNumTries() {\n    return this.numTries;\n  }\n\n  /** Sleeps for the given milliseconds only if task has not yet succeeded. */\n  sleep(milliseconds) {\n    if (!this.hasSucceeded) {\n      this.timer.threadSleep(milliseconds);\n    }\n  }\n\n  /** Resets the persister's timer and sets success flag to false, for new task. */\n  restart() {\n    this.timer = AquiferTimer.startTimer(this.timeoutMillis);\n    this.hasSucceeded = false;\n  }\n\n  isFinished() {\n    if (this.isTerminated) return true;\n\n    if (this.numTries > 0) {\n      this.sleep(this.implicitWaitInMillis);\n    }\n\n    this.numTries += 1;\n\n    return this.hasSucceeded || this.timer.isExpired();\n  }\n\n  static persistUntil(timeoutMillis) {\n    return new AquiferTaskPersister(timeoutMillis);\n  }\n\n  didSucceed() {\n    return this.hasSucceeded;\n  }\n\n  printThrowableIfCaught() {\n    if (this.error != null) {\n      console.log('Throwable', this.error);\n    }\n  }\n\n  setSuccess(didSucceed) {\n    this.hasSucceeded = didSucceed;\n  }\n\n  setException(e) {\n    console.log('Throwable', e);\n    this.throwable = e;\n  }\n\n  /** Set the amount of time in milliseconds to wait between retrying the task. Defaults to 0 ms. */\n  setImplicitWait(milliseconds) {\n    this.implicitWaitInMillis = milliseconds;\n    return this;\n  }\n\n  /** Terminates the task persister. */\n  terminate() {\n    this.isTerminated = true;\n  }\n\n  /** Get the elapsed time on the timer */\n  getElapsedTime() {\n    return this.timer.elapsedTime();\n  }\n}\n"],"file":"AquiferTaskPersister.js"}