{"version":3,"sources":["../src/AquiferAssert.js"],"names":["timeoutWdio","require","config","waitforTimeout","AquiferAssert","log","aVisualTestFailed","Error","A_VISUAL_TEST_FAILED","f","value","targetDescription","timeout","screenshotId","logRichMessages","text","style","emoji","verb","object","browser","waitUntil","Math","round","err","saveScreenshotWhileWaiting","saveEventScreenshot","boolean","description","filler","JSON","stringify"],"mappings":";;;;;;;;;;;;;AACA;;AADA;AAGA,IAAMA,WAAW,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCC,MAAlC,CAAyCC,cAA7D;;IAEaC,a;;;;;;;;;wCACgB;AACzB,UAAIC,gBAAIC,iBAAR,EAA2B;AACzBD,wBAAIC,iBAAJ,GAAwB,KAAxB;AACA,cAAM,IAAIC,KAAJ,CAAUC,gCAAV,CAAN;AACD;AACF;;;gCAEkBC,C,EAAGC,K,EAAOC,iB,EAA0C;AAAA,UAAvBC,OAAuB,uEAAbZ,WAAa;;AACrE,UAAMa,YAAY,GAAGR,gBAAIS,eAAJ,CAAoB,CACvC;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUC;AAAjC,OADuC,EAEvC;AAAEF,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUE;AAApC,OAFuC,EAGvC;AAAEH,QAAAA,IAAI,YAAKJ,iBAAL,MAAN;AAAiCK,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUG;AAAlD,OAHuC,EAIvC;AAAEJ,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUE;AAApC,OAJuC,EAKvC;AAAEH,QAAAA,IAAI,EAAEL,KAAR;AAAeM,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUG;AAAhC,OALuC,CAApB,CAArB;;AAMA,UAAI;AACFC,QAAAA,OAAO,CAACC,SAAR,CAAkB;AAAA,iBAAMZ,CAAC,OAAOC,KAAd;AAAA,SAAlB,EAAuCY,IAAI,CAACC,KAAL,CAAWX,OAAO,GAAG,CAArB,CAAvC;AACD,OAFD,CAEE,OAAOY,GAAP,EAAY;AACZnB,wBAAIoB,0BAAJ;AACD;;AACD,UAAI;AACFL,QAAAA,OAAO,CAACC,SAAR,CAAkB;AAAA,iBAAMZ,CAAC,OAAOC,KAAd;AAAA,SAAlB,EAAuCE,OAAvC;AACD,OAFD,CAEE,OAAOY,GAAP,EAAY;AACZ,cAAM,IAAIjB,KAAJ,WAAaI,iBAAb,4BAA+CD,KAA/C,2BAAmED,CAAC,EAApE,QAAN;AACD,OAJD,SAIU;AACRJ,wBAAIqB,mBAAJ,CAAwBb,YAAxB;AACD;AACF;;;2BAEac,O,EAASC,W,EAAa;AAClC,UAAMf,YAAY,GAAGR,gBAAIS,eAAJ,CAAoB,CACvC;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUC;AAAjC,OADuC,EAEvC;AAAEF,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUE;AAA1C,OAFuC,EAGvC;AAAEH,QAAAA,IAAI,YAAKa,WAAL,OAAN;AAA4BZ,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUG;AAA7C,OAHuC,EAIvC;AAAEJ,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUa;AAArC,OAJuC,EAKvC;AAAEd,QAAAA,IAAI,EAAEe,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAAR;AAAiCX,QAAAA,KAAK,EAAEX,gBAAIW,KAAJ,CAAUG;AAAlD,OALuC,CAApB,CAArB;;AAMAd,sBAAIqB,mBAAJ,CAAwBb,YAAxB;;AAEA,UAAI,CAACc,OAAL,EAAc;AACZ,cAAM,IAAIpB,KAAJ,6BAA+BqB,WAA/B,EAAN;AACD;AACF","sourcesContent":["// @ts-check\nimport { A_VISUAL_TEST_FAILED, log } from './AquiferLog';\n\nconst timeoutWdio = require('../wdio-conf/wdio.conf').config.waitforTimeout;\n\nexport class AquiferAssert {\n  static visualTestsPassed() {\n    if (log.aVisualTestFailed) {\n      log.aVisualTestFailed = false;\n      throw new Error(A_VISUAL_TEST_FAILED);\n    }\n  }\n\n  static valueEquals(f, value, targetDescription, timeout = timeoutWdio) {\n    const screenshotId = log.logRichMessages([\n      { text: 'ðŸ¤”  ', style: log.style.emoji },\n      { text: 'Assert ', style: log.style.verb },\n      { text: `${targetDescription} `, style: log.style.object },\n      { text: 'equals ', style: log.style.verb },\n      { text: value, style: log.style.object }]);\n    try {\n      browser.waitUntil(() => f() === value, Math.round(timeout / 2));\n    } catch (err) {\n      log.saveScreenshotWhileWaiting();\n    }\n    try {\n      browser.waitUntil(() => f() === value, timeout);\n    } catch (err) {\n      throw new Error(`${targetDescription}: Expected:  \"${value}\". Actual: \"${f()}\"`);\n    } finally {\n      log.saveEventScreenshot(screenshotId);\n    }\n  }\n\n  static assert(boolean, description) {\n    const screenshotId = log.logRichMessages([\n      { text: 'ðŸ¤”  ', style: log.style.emoji },\n      { text: 'Assert true: ', style: log.style.verb },\n      { text: `${description}. `, style: log.style.object },\n      { text: 'Actual: ', style: log.style.filler },\n      { text: JSON.stringify(boolean), style: log.style.object }]);\n    log.saveEventScreenshot(screenshotId);\n\n    if (!boolean) {\n      throw new Error(`Assertion failed. ${description}`);\n    }\n  }\n}\n"],"file":"AquiferAssert.js"}