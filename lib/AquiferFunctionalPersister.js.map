{"version":3,"sources":["../src/AquiferFunctionalPersister.js"],"names":["AquiferFunctionalPersister","timeoutInMillis","Math","round","timeBetweenActionsInMillis","goal","task","chore","consequence","failfast","exceptionMessage","precondition","exceptionMessageRunner","p","AquiferTaskPersister","initialize","setImplicitWait","isFinished","setSuccess","didSucceed","error","setException","printThrowableIfCaught","console","log","Error","getNumTries","timer","elapsedTimeString"],"mappings":"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","sourcesContent":["// @ts-check\nimport { AquiferTaskPersister } from './AquiferTaskPersister';\n\nexport class AquiferFunctionalPersister {\n  constructor(timeoutInMillis = 60 * 1000) {\n    this.timeoutInMillis = Math.round(timeoutInMillis);\n    this.timeBetweenActionsInMillis = 200;\n    this.goal = () => false;\n    this.task = () => { };\n    this.chore = () => { };\n    this.consequence = () => { };\n    this.failfast = false;\n    this.exceptionMessage = null;\n    this.precondition = () => true;\n    this.exceptionMessageRunner = () => null;\n  }\n\n  setTimeout(timeoutInMillis) {\n    this.timeoutInMillis = timeoutInMillis;\n    return this;\n  }\n\n  setTimeBetweenActions(timeBetweenActionsInMillis) {\n    this.timeBetweenActionsInMillis = Math.round(timeBetweenActionsInMillis);\n    return this;\n  }\n\n  setGoal(goal) {\n    this.goal = goal;\n    return this;\n  }\n\n  setPrecondition(precondition) {\n    this.precondition = precondition;\n    return this;\n  }\n\n  /** Per loop, the task to perform before checking `goal`. */\n  setTask(task) {\n    this.task = task;\n    return this;\n  }\n\n  /** Per loop, the task to perform after `goal` fails. */\n  setChore(chore) {\n    this.chore = chore;\n    return this;\n  }\n\n  setConsequence(consequence) {\n    this.consequence = consequence;\n    return this;\n  }\n\n  failfastWithMessage(exceptionMessage) {\n    this.failfast = true;\n    this.exceptionMessage = exceptionMessage;\n    return this;\n  }\n\n  failfastWithMessageRunner(exceptionMessageRunner) {\n    this.failfast = true;\n    this.exceptionMessageRunner = exceptionMessageRunner;\n    return this;\n  }\n\n\n  /**\n   * Execute the wait task using the timeouts and condition supplied by setters. Fails quietly by default; override with\n   * {@link #failfastWithMessage}.\n   */\n  start() {\n    if (this.precondition()) {\n      const p = AquiferTaskPersister\n        .initialize(this.timeoutInMillis)\n        .setImplicitWait(this.timeBetweenActionsInMillis);\n\n      while (!p.isFinished()) {\n        try {\n          this.task();\n          p.setSuccess(this.goal());\n          if (!p.didSucceed()) {\n            this.chore();\n          }\n        } catch (error) {\n          p.setException(error);\n        }\n        p.printThrowableIfCaught();\n      }\n\n      if (!p.didSucceed()) {\n        this.consequence();\n\n        if (this.failfast) {\n          try {\n            this.exceptionMessage = this.exceptionMessage || this.exceptionMessageRunner();\n          } catch (error) {\n            console.log('Throwable', error);\n          }\n\n          throw Error(`${this.exceptionMessage}. ${p.getNumTries()} attempts over ${p.timer.elapsedTimeString()}`);\n        }\n      }\n      return p.didSucceed();\n    }\n    return null;\n  }\n}\n"],"file":"AquiferFunctionalPersister.js"}